# -*- mode: makefile -*-

# GDC -- D front-end for GCC
# Copyright (C) 2004 David Friedman
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


# Manual configuration since patching gcc/configure.ac is troublesome...

# Which version of the language to build? '1' or '2'.
# D_LANGUAGE_VERSION=2

# The file d-make-include is created by setup-gcc.sh
-include $(srcdir)/d/d-make-include

# For various glibc, we need to define this to get NAN and FP_ constants
D_EXTRA_DEFINES += -D_GNU_SOURCE=1

# Enable D interface files
D_EXTRA_DEFINES += -D_DH=1

# Enables correct implementation of delegates. This requires patching GCC.
D_EXTRA_DEFINES += -DD_NO_TRAMPOLINES=1

# Enables placing some RTTI in the read-only data section.  Does not
# have to be an ELF target.
D_EXTRA_DEFINES += -DELFOBJ=1

# Enable the asm(...) style syntax for extended asm.  Deviates from the D
# specification syntax.  Can still use extended asm if disabled.
# D_EXTRA_DEFINES += -DGDC_EXTENDED_ASM_SYNTAX=1

# As with C++: (quote) OTOH, I think this means the g++ driver...
# Note that it would be nice to move the dependency on g++
# into the C++ rule, but that needs a little bit of work
# to do the right thing within all.cross.
D_DRIVER_NAME = gdc
D_DRIVER_OBJS = d/d-spec.o d/d-gcc.o version.o prefix.o intl.o
D_COMPILER_NAME = cc1d

D_INSTALL_NAME = $(shell echo $(D_DRIVER_NAME)|sed '$(program_transform_name)')
DMD_INSTALL_NAME = $(shell echo dmd|sed '$(program_transform_name)')
GDMD_INSTALL_NAME = $(shell echo gdmd|sed '$(program_transform_name)')
D_TARGET_INSTALL_NAME = $(target_alias)-$(shell echo $(D_DRIVER_NAME)|sed '$(program_transform_name)')
DMD_TARGET_INSTALL_NAME = $(target_alias)-$(shell echo dmd|sed '$(program_transform_name)')
GDMD_TARGET_INSTALL_NAME = $(target_alias)-$(shell echo gdmd|sed '$(program_transform_name)')

ifdef D_LANGUAGE_VERSION
 ifeq ($(D_LANGUAGE_VERSION),2)
D_ver_suffix=2
 else
D_ver_suffix=
 endif
else
$(error D_LANGUAGE_VERSION not defined)
endif

D_dmd_srcdir=d/dmd$(D_ver_suffix)
D_incl_subdir=d$(D_ver_suffix)
D_EXTRA_DEFINES += -DLIBPHOBOS=\"-lgphobos$(D_ver_suffix)\" -DLIBPHOBOS_PROFILE=\"-lgphobos$(D_ver_suffix)\"

# druntime library for linker
ifeq ($(D_LANGUAGE_VERSION),2)
  D_EXTRA_DEFINES += -DLIBDRUNTIME=\"-lgdruntime\" -DLIBDRUNTIME_PROFILE=\"-lgdruntime\"
endif

# This should be configured
gcc_d_include_dir = $(libsubdir)/$(unlibsubdir)/..`echo $(exec_prefix) | sed -e 's|^$(prefix)||' -e 's|/[^/]*|/..|g'`/include/$(D_incl_subdir)/$(version)

ifeq ($(D_LANGUAGE_VERSION),2)
D_DMD_H := d/dmd/aggregate.h d/dmd/arraytypes.h d/dmd/attrib.h \
	d/dmd/cond.h d/dmd/dchar.h d/dmd/declaration.h \
	d/dmd/doc.h d/dmd/dsymbol.h d/dmd/enum.h d/dmd/expression.h \
	d/dmd/gnuc.h d/dmd/hdrgen.h d/dmd/html.h d/dmd/identifier.h \
	d/dmd/import.h d/dmd/init.h d/dmd/lexer.h d/dmd/lstring.h \
	d/dmd/macro.h d/dmd/mars.h d/dmd/mem.h d/dmd/module.h d/dmd/mtype.h \
	d/dmd/parse.h d/dmd/root.h d/dmd/scope.h \
	d/dmd/statement.h d/dmd/staticassert.h d/dmd/stringtable.h \
	d/dmd/template.h d/dmd/total.h d/dmd/utf.h d/dmd/version.h \
	d/id.h d/d-dmd-gcc.h d/d-gcc-real.h
D_DMD_H := $(subst d/dmd,$(D_dmd_srcdir),$(D_DMD_H))
else
D_DMD_H := d/dmd/aav.h d/dmd/aggregate.h d/dmd/aliasthis.h d/dmd/arraytypes.h \
	d/dmd/async.h d/dmd/attrib.h \
	d/d-gcc-complex_t.h d/dmd/cond.h d/dmd/dchar.h d/dmd/declaration.h \
	d/dmd/doc.h d/dmd/dsymbol.h d/dmd/enum.h d/dmd/expression.h \
	d/dmd/gnuc.h d/dmd/hdrgen.h d/dmd/html.h d/dmd/identifier.h \
	d/dmd/import.h d/dmd/init.h d/dmd/json.h d/dmd/lexer.h d/dmd/lstring.h \
	d/dmd/macro.h d/dmd/mars.h d/dmd/module.h d/dmd/mtype.h \
	d/dmd/parse.h d/dmd/rmem.h d/dmd/root.h d/dmd/scope.h \
	d/dmd/speller.h d/dmd/statement.h d/dmd/staticassert.h d/dmd/stringtable.h \
	d/dmd/template.h d/dmd/total.h d/dmd/utf.h d/dmd/version.h \
	d/id.h d/d-dmd-gcc.h d/d-gcc-real.h
D_DMD_H := $(subst d/dmd,$(D_dmd_srcdir),$(D_DMD_H))
endif

D_TREE_H = $(TREE_H) d/d-tree.def d/d-lang.h d/d-codegen.h d/d-objfile.h \
	d/d-irstate.h d/d-dmd-gcc.h d/d-gcc-includes.h d/d-gcc-real.h \
	d/symbol.h d/dt.h coretypes.h function.h varray.h \
	$(SYSTEM_H) $(CONFIG_H) $(TARGET_H) \
	$(GGC_H) \
	$(srcdir)/../include/hashtab.h $(srcdir)/../include/splay-tree.h \
	$(D_DMD_H)

#D_EXTRA_DEFINES += -DD_PHOBOS_DIR=\"$(gcc_d_include_dir)\"


# Would be better to configure these rather than running shell script again and again,
# but would require a patch to gcc/configure.ac
D_gcc_main_ver:=$(shell echo $(version) | sed -e 's/\([0-9]*\.[0-9]*\).*/\1/')
ifeq ($(D_gcc_main_ver),4.0)
  D_is_apple_ver:=$(shell grep version_string $(gcc_version_trigger) | grep 'Apple')
endif

gcc_d_target_include_dir=$(gcc_d_include_dir)/$(target_noncanonical)

D_EXTRA_DEFINES += -DD_GCC_VER=$(subst .,,$(D_gcc_main_ver))

#ifeq ($(D_gcc_main_ver),3.4)
#  D_EXTRA_DEFINES += -DD_GCC_VER=34
#else
#  ifeq ($(D_gcc_main_ver),4.0)
#   D_EXTRA_DEFINES += -DD_GCC_VER=40
#  else
#    ifeq 
#  else
#   D_EXTRA_DEFINES += -DD_GCC_VER=41
#  endif
#endif

# Actual names to use when installing a cross-compiler.
D_CROSS_NAME = $(D_INSTALL_NAME)
DMD_CROSS_NAME = $(DMD_INSTALL_NAME)
GDMD_CROSS_NAME = $(GDMD_INSTALL_NAME)

ifeq ($(version),3.4.1)
# need for Cygwin which does not have 3.4.x, x>1 yet...
D_EXTRA_DEFINES += -DD_GCC_VER341=1
endif
ifeq ($(version),3.4.0)
# similar: needed for SkyOS which uses 3.4.0
D_EXTRA_DEFINES += -DD_GCC_VER341=1
endif

D d: $(D_COMPILER_NAME)$(exeext) d/pkgvars

# Tell GNU make to ignore these if they exist.
.PHONY: D d

D_BORROWED_C_OBJS=attribs.o cppdefault.o

D_INCLUDES = -I$(srcdir)/d -I$(srcdir)/$(D_dmd_srcdir) -Id
# -Wno-long-double is for MacOS X -- needs to be configurated
D_CC_FLAGS = -Wno-missing-braces
D_CC_FLAGS += -fmessage-length=0
#ifeq ($(if $(findstring darwin,$(build)),T,$(if $(findstring darwin,$(host)),T)),T)
# 
#D_CC_FLAGS += -Wno-long-double
#endif
ifeq ($(if $(findstring solaris,$(build)),T,$(if $(findstring solaris,$(host)),T)),T)
D_CC_FLAGS += -Wcast-align
endif

#D_CC_FLAGS += -O0 -g

ALL_D_COMPILER_FLAGS = $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(D_INCLUDES) $(D_EXTRA_DEFINES) $(D_CC_FLAGS)
# Somehow, I started getting problems with the C++ <complex.h> being included..
ALL_DMD_COMPILER_FLAGS = $(ALL_CFLAGS) $(ALL_CPPFLAGS) -Id -I$(srcdir)/$(D_dmd_srcdir) -I$(srcdir)/d $(D_EXTRA_DEFINES) $(D_CC_FLAGS)

# Create the compiler driver for D.
$(D_DRIVER_NAME)$(exeext): $(D_DRIVER_OBJS) $(EXTRA_GCC_OBJS) $(LIBDEPS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \
	$(D_DRIVER_OBJS) $(EXTRA_GCC_OBJS) $(LIBS)

# Create a version of the g++ driver which calls the cross-compiler.
$(D_DRIVER_NAME)-cross$(exeext): $(D_DRIVER_NAME)$(exeext)
	-rm -f $(D_DRIVER_NAME)-cross$(exeext)
	cp $(D_DRIVER_NAME)$(exeext) $(D_DRIVER_NAME)-cross$(exeext)

ifeq ($(D_LANGUAGE_VERSION),2)
D_DMD_OBJS = \
    d/access.dmd.o d/array.dmd.o d/attrib.dmd.o d/arrayop.dmd.o d/cast.dmd.o \
    d/class.dmd.o d/clone.dmd.o d/cond.dmd.o d/constfold.dmd.o d/dchar.dmd.o \
    d/declaration.dmd.o d/delegatize.dmd.o d/doc.dmd.o d/dsymbol.dmd.o \
    d/dump.dmd.o d/entity.dmd.o d/enum.dmd.o d/expression.dmd.o d/func.dmd.o \
    d/gnuc.dmd.o d/hdrgen.dmd.o d/html.dmd.o d/identifier.dmd.o d/import.dmd.o \
    d/init.dmd.o d/inline.dmd.o d/interpret.dmd.o d/lexer.dmd.o \
    d/lstring.dmd.o d/macro.dmd.o d/mangle.dmd.o d/mars.dmd.o d/mem.dmd.o \
    d/mtype.dmd.o d/module.dmd.o d/opover.dmd.o d/optimize.dmd.o d/parse.dmd.o \
    d/root.dmd.o d/scope.dmd.o d/statement.dmd.o d/staticassert.dmd.o \
    d/stringtable.dmd.o d/struct.dmd.o d/template.dmd.o d/todt.dmd.o \
    d/toobj.dmd.o d/typinf.dmd.o d/unialpha.dmd.o d/utf.dmd.o d/version.dmd.o
else
D_DMD_OBJS = \
    d/aav.dmd.o d/access.dmd.o d/aliasthis.dmd.o d/array.dmd.o d/arrayop.dmd.o \
    d/async.dmd.o d/attrib.dmd.o d/cast.dmd.o d/class.dmd.o d/clone.dmd.o \
    d/cond.dmd.o d/constfold.dmd.o d/dchar.dmd.o d/declaration.dmd.o \
    d/delegatize.dmd.o d/doc.dmd.o d/dsymbol.dmd.o d/dump.dmd.o d/entity.dmd.o \
    d/enum.dmd.o d/expression.dmd.o d/func.dmd.o d/gnuc.dmd.o d/hdrgen.dmd.o \
    d/html.dmd.o d/identifier.dmd.o d/imphint.dmd.o d/import.dmd.o d/init.dmd.o \
    d/inline.dmd.o d/interpret.dmd.o d/json.dmd.o d/lexer.dmd.o d/lstring.dmd.o \
    d/macro.dmd.o d/mangle.dmd.o d/mars.dmd.o d/mtype.dmd.o \
    d/module.dmd.o d/opover.dmd.o d/optimize.dmd.o d/parse.dmd.o d/rmem.dmd.o \
    d/root.dmd.o d/scope.dmd.o d/speller.dmd.o d/statement.dmd.o d/staticassert.dmd.o \
    d/stringtable.dmd.o d/struct.dmd.o d/template.dmd.o d/todt.dmd.o \
    d/toobj.dmd.o d/typinf.dmd.o d/unialpha.dmd.o d/unittests.dmd.o d/utf.dmd.o d/version.dmd.o
endif

ifeq ($(D_LANGUAGE_VERSION),2)
D_DMD_OBJS += d/builtin.dmd.o d/traits.dmd.o
endif
D_GENERATED_SRCS = d/id.c d/impcnvtab.c
D_GENERATED_OBJS = d/id.gen.o d/impcnvtab.gen.o
D_GLUE_OBJS = d/d-lang.glue.o d/d-decls.glue.o d/d-codegen.glue.o \
              d/d-objfile.glue.o d/d-irstate.glue.o d/d-glue.glue.o \
              d/d-convert.glue.o d/d-todt.glue.o d/d-gcc-real.glue.o \
              d/d-gt.cglue.o d/d-builtins.cglue.o d/d-misc.cglue.o \
              d/d-builtins2.glue.o d/symbol.glue.o d/asmstmt.glue.o d/dt.glue.o
ifeq ($(D_LANGUAGE_VERSION),2)
D_GLUE_OBJS += d/d-cppmngl.glue.o
endif

D_BI_ATTRS = d/d-bi-attrs-341.h d/d-bi-attrs-34.h d/d-bi-attrs-40.h \
             d/d-bi-attrs-41.h d/d-bi-attrs-42.h d/d-bi-attrs-43.h \
             d/d-bi-attrs-44.h

ifdef D_is_apple_ver
  ifeq ($(D_gcc_main_ver),4.0)
    D_GLUE_OBJS += d/d-apple-gcc.cglue.o
    D_BORROWED_C_OBJS += stub-objc.o prefix.o $(C_TARGET_OBJS)
  endif
else
  ifeq ($(D_gcc_main_ver),3.4)
    D_GLUE_OBJS += d/d-c-stubs.cglue.o
    D_BORROWED_C_OBJS += stub-objc.o prefix.o $(C_TARGET_OBJS)
    D_EXTRA_LIBS += libcpp.a
  endif
  ifeq ($(D_gcc_main_ver),4.1)
    D_GLUE_OBJS += d/d-c-stubs.cglue.o
    D_BORROWED_C_OBJS += stub-objc.o prefix.o $(C_TARGET_OBJS)
  endif 
  ifeq ($(D_gcc_main_ver),4.2)
    D_GLUE_OBJS += d/d-c-stubs.cglue.o
    D_BORROWED_C_OBJS += stub-objc.o prefix.o $(C_TARGET_OBJS)
    D_DRIVER_OBJS += opts-common.o gcc-options.o
  endif 
  ifeq ($(D_gcc_main_ver),4.3)
    D_GLUE_OBJS += d/d-c-stubs.cglue.o
    D_BORROWED_C_OBJS += stub-objc.o prefix.o $(C_TARGET_OBJS)
    D_EXTRA_LIBS += $(GMPLIBS)
    D_DRIVER_OBJS += opts-common.o gcc-options.o
  endif
  ifeq ($(D_gcc_main_ver),4.4)
    D_GLUE_OBJS += d/d-c-stubs.cglue.o
    D_BORROWED_C_OBJS += stub-objc.o prefix.o $(C_TARGET_OBJS)
    D_BORROWED_C_OBJS += gimplify.o tree-iterator.o
    D_EXTRA_LIBS += $(BACKENDLIBS)
    D_DRIVER_OBJS += opts-common.o gcc-options.o
  endif
endif

D_BORROWED_C_OBJS += 

# The full path for -include ...total.h is only needed for g++ < 3.x
# ALL_D_COMPILER_FLAGS causes issues -- c++ <complex.h> instead of C <complex.h>
# Not all DMD sources depend on d-dmd-gcc.h
d/%.dmd.o: $(srcdir)/$(D_dmd_srcdir)/%.c $(D_DMD_H) d/d-confdefs.h
	$(CXX) $(ALL_DMD_COMPILER_FLAGS) -include $(srcdir)/$(D_dmd_srcdir)/total.h -o d/$*.dmd.o -c $<

# For generator programs, can't implicitly include "total.h" which includes "id.h"
d/%.dmdgen.o: $(srcdir)/$(D_dmd_srcdir)/%.c
	$(CC_FOR_BUILD) $(ALL_DMD_COMPILER_FLAGS) -o d/$*.dmdgen.o -c $<

d/%.gen.o: d/%.c
	$(CXX) $(ALL_DMD_COMPILER_FLAGS)  -o d/$*.gen.o -c $<

d/%.glue.o: $(srcdir)/d/%.cc $(D_TREE_H)
	$(CXX) $(ALL_D_COMPILER_FLAGS) -DGCC_SAFE_DMD=1 -o d/$*.glue.o -c $<

d/%.cglue.o: $(srcdir)/d/%.c $(D_TREE_H)
	$(CC) $(ALL_D_COMPILER_FLAGS) -o d/$*.cglue.o -c $<

d/impcvgen: d/impcnvgen.dmdgen.o
	$(CC_FOR_BUILD) $(ALL_D_COMPILER_FLAGS) $(BUILD_LDFLAGS) -o $@ $^

d/idgen: d/idgen.dmdgen.o
	$(CC_FOR_BUILD) $(ALL_D_COMPILER_FLAGS) $(BUILD_LDFLAGS)  -o $@ $^

d/impcnvtab.c: d/impcvgen
	cd d && ./impcvgen
d/id.c: d/idgen
	cd d && ./idgen
# idgen also generates id.h; just verify id.h exists
d/id.h: d/id.c
	@ ls d/id.h

d/d-confdefs.h: d/Make-lang.in
	echo "#define D_PHOBOS_DIR \""$(gcc_d_include_dir)"\"" > $@
	echo "#define D_PHOBOS_TARGET_DIR \""$(gcc_d_target_include_dir)"\"" >> $@
	$(srcdir)/d/target-ver-syms.sh $(target) >> $@

d/id.gen.o: d/id.c $(D_DMD_H)
d/impcnvtab.gen.o: d/impcnvtab.c $(D_DMD_H)
d/d-lang.glue.o: d/d-lang.cc $(D_TREE_H) d/d-confdefs.h options.h
d/d-irstate.glue.o: d/d-irstate.cc $(D_TREE_H)
d/d-codegen.glue.o: d/d-codegen.cc $(D_TREE_H)
d/d-decls.glue.o: d/d-decls.cc $(D_TREE_H)
d/d-glue.glue.o: d/d-glue.cc $(D_TREE_H)
d/d-convert.glue.o: d/d-convert.cc $(D_TREE_H)
d/gcc-mars.glue.o: d/gcc-mars.cc $(D_TREE_H)
d/d-todt.glue.o: d/d-todt.cc $(D_TREE_H)
d/d-gcc-real.glue.o: d/d-gcc-real.cc $(D_TREE_H)
d/asmstmt.glue.o: d/asmstmt.cc d/d-asm-i386.h $(D_TREE_H)
d/symbol.glue.o: d/symbol.cc $(D_TREE_H)
d/dt.glue.o: d/symbol.cc $(D_TREE_H)
d/d-gt.cglue.o: d/d-gt.c $(D_TREE_H)
d/d-builtins.cglue.o: d/d-builtins.c $(D_TREE_H) $(D_BI_ATTRS)
d/d-builtins2.glue.o: d/d-builtins.c $(D_TREE_H)
d/d-misc.cglue.o: d/d-misc.c $(D_TREE_H)

ifeq ($(D_gcc_main_ver),3.3)
D_CORETYPES=
else
D_CORETYPES=coretypes.h
endif

d/d-gcc.o: gcc.c $(CONFIG_H) $(SYSTEM_H) $(D_CORETYPES) $(TM_H) intl.h multilib.h \
    Makefile $(lang_specs_files) specs.h prefix.h $(GCC_H)
	(SHLIB_LINK='$(SHLIB_LINK)' \
	SHLIB_MULTILIB='$(SHLIB_MULTILIB)'; \
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \
  $(DRIVER_DEFINES) -DD_DRIVER_ONLY=1 \
  -c $(srcdir)/gcc.c $(OUTPUT_OPTION))

d/d-spec.o: $(srcdir)/d/d-spec.c $(SYSTEM_H) $(D_CORETYPES) $(TM_H) $(GCC_H) $(CONFIG_H)
	(SHLIB_LINK='$(SHLIB_LINK)' \
	SHLIB_MULTILIB='$(SHLIB_MULTILIB)'; \
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(DRIVER_DEFINES) \
		$(ALL_D_COMPILER_FLAGS) \
		$(INCLUDES) -o $@ $(srcdir)/d/d-spec.c)

D_ALL_OBJS = $(D_GENERATED_OBJS) $(D_BORROWED_C_OBJS) $(D_DMD_OBJS) $(D_GLUE_OBJS)

$(D_COMPILER_NAME)$(exeext): $(D_ALL_OBJS) $(BACKEND) $(LIBDEPS)
	$(CXX) $(ALL_D_COMPILER_FLAGS) $(LDFLAGS) -o $@ \
		$(D_ALL_OBJS) $(BACKEND) $(D_EXTRA_LIBS) $(LIBS)

# Stage hooks:
# The main makefile has already created stage?/cobol.

# Are these are obsolete? (see gcc/Changelog.6)
#  Rather, is d.all.build actually used? Doesn't seem so.  d.all.cross does...
# A lot of these are different for gcc-3.3 / gcc-3.4
d.all.build: $(D_DRIVER_NAME)$(exeext) $(D_COMPILER_NAME)$(exeext)
d.all.cross: $(D_DRIVER_NAME)-cross$(exeext)
d.start.encap: $(D_DRIVER_NAME)$(exeext)
d.rest.encap:
d.info:
d.dvi:
# <foo>.generated-manpages is also required, but not documented as such.
# 3.4...
# d.man: doc/$(D_DRIVER_NAME).1
d.man:



# ... 3.4
d.generated-manpages:
d.install-normal:
d.install-common: installdirs
	-rm -f $(DESTDIR)$(bindir)/$(D_INSTALL_NAME)$(exeext)
	-rm -f $(DESTDIR)$(bindir)/$(GDMD_INSTALL_NAME)
	$(INSTALL_PROGRAM) $(D_DRIVER_NAME)$(exeext) $(DESTDIR)$(bindir)/$(D_INSTALL_NAME)$(exeext)
	-perl -e 'exit 0;' && $(INSTALL_PROGRAM) $(srcdir)/d/dmd-script $(DESTDIR)$(bindir)/$(GDMD_INSTALL_NAME)
	-chmod a+x $(DESTDIR)$(bindir)/$(D_INSTALL_NAME)$(exeext)
	-chmod a+x $(DESTDIR)$(bindir)/$(GDMD_INSTALL_NAME)
	-if [ -f $(D_COMPILER_NAME)$(exeext) ] ; then \
	  if [ -f $(D_DRIVER_NAME)-cross$(exeext) ] ; then \
	    if [ -d $(DESTDIR)$(gcc_tooldir)/bin/. ] ; then \
	      rm -f $(DESTDIR)$(gcc_tooldir)/bin/$(D_DRIVER_NAME)$(exeext); \
	      rm -f $(DESTDIR)$(gcc_tooldir)/bin/gdmd$(exeext); \
	      $(INSTALL_PROGRAM) $(D_DRIVER_NAME)-cross$(exeext) $(DESTDIR)$(gcc_tooldir)/bin/$(D_DRIVER_NAME)$(exeext); \
	      perl -e 'exit 0;' && $(INSTALL_PROGRAM) $(srcdir)/d/dmd-script $(DESTDIR)$(gcc_tooldir)/bin/gdmd; \
	    else true; fi; \
	  else \
	    rm -f $(DESTDIR)$(bindir)/$(D_TARGET_INSTALL_NAME)$(exeext); \
	    rm -f $(DESTDIR)$(bindir)/$(GDMD_TARGET_INSTALL_NAME); \
	    ( cd $(DESTDIR)$(bindir) && \
	      $(LN) $(D_INSTALL_NAME)$(exeext) $(D_TARGET_INSTALL_NAME)$(exeext) ); \
	    ( cd $(DESTDIR)$(bindir) && \
	      $(LN) $(GDMD_INSTALL_NAME) $(GDMD_TARGET_INSTALL_NAME) ); \
	  fi ; \
	fi

d.install-info:

d.install-man: installdirs $(DESTDIR)$(man1dir)/$(D_INSTALL_NAME)$(man1ext) $(DESTDIR)$(man1dir)/$(GDMD_INSTALL_NAME)$(man1ext)

$(DESTDIR)$(man1dir)/$(D_INSTALL_NAME)$(man1ext): $(srcdir)/d/gdc.1
	-rm -f $@
	-$(INSTALL_DATA) $< $@
	-chmod a-x $@

$(DESTDIR)$(man1dir)/$(GDMD_INSTALL_NAME)$(man1ext): $(srcdir)/d/dmd-script.1
	-rm -f $@
	-$(INSTALL_DATA) $< $@
	-chmod a-x $@

d.uninstall:
d.distdir:
d.mostlyclean:
	-rm -f d/*$(objext)
	-rm -f d/*$(coverageexts)
	-rm -f $(D_GENERATED_SRCS)
# shouldn't this do something?
d.clean:
d.distclean:
	-rm -f d/config.status
	-rm -f d/Makefile
d.extraclean:
d.maintainer-clean:

# where to clean id.[ch] and impcnvtbl?

d.stage1: stage1-start
	-mv d/*$(objext) stage1/d
d.stage2: stage2-start
	-mv d/*$(objext) stage2/d
d.stage3: stage3-start
	-mv d/*$(objext) stage3/d
d.stage4: stage4-start
	-mv d/*$(objext) stage4/d
d.stageprofile: stageprofile-start
	-mv d/*$(objext) stageprofile/d
d.stagefeedback: stagefeedback-start
	-mv d/*$(objext) stagefeedback/d

.PHONY: check-d
check-d:
	@ echo "note: check-d does not perform any tests yet."

d/pkgvars: Makefile
	@rm -f $@
	@echo "build=$(build)" >> $@
	@echo "host=$(host)" >> $@
	@echo "target=$(target)" >> $@
	@echo "target_alias=$(target_noncanonical)" >> $@
	@echo "gcc_version=$(version)" >> $@
	@echo "srcdir=$(srcdir)" >> $@
	@echo "prefix=$(prefix)" >> $@
	@echo "exeext=$(exeext)" >> $@
